{"version":3,"sources":["../../src/bin/usage.js"],"names":["u1","trim","u","commands","Object","keys","descriptions","values","commandLength","reduce","longestName","longestDescription","name","command","theLongest","split","acc","c","length","pad","string","l","t","Array","from","ts","map","_","join","s","usa","i","value","vals","firstVal","otherVals","firstLine","emptyPad","otherLines","val","r","res","USA","a","usage"],"mappings":";;;;;;AAAA,MAAMA,KAAM;;;8BAAD,CAGoBC,IAHpB,EAAX;AAKA,MAAMC,IAAI;AACR,kBAAgB,0BADR;AAER,kBAAgB,mDAFR;AAGR,gBAAc;AAHN,CAAV;AAKA,MAAMC,WAAWC,OAAOC,IAAP,CAAYH,CAAZ,CAAjB;AACA,MAAMI,eAAeF,OAAOG,MAAP,CAAcL,CAAd,CAArB;;eAEe,MAAM;AACnB,QAAM,CAACM,aAAD,IAAkBL,SAASM,MAAT,CAAgB,CAAC,CAACC,cAAc,CAAf,EAAkBC,qBAAqB,CAAvC,CAAD,EAA4CC,IAA5C,KAAqD;AAC3F;AACA,UAAMC,UAAUX,EAAEU,IAAF,CAAhB;AACA,UAAME,aAAaD,QAAQE,KAAR,CAAc,IAAd,EAChBN,MADgB,CACT,CAACO,GAAD,EAAMC,CAAN,KAAY;AAClB,UAAIA,EAAEC,MAAF,GAAWF,GAAf,EAAoB,OAAOC,EAAEC,MAAT;AACpB,aAAOF,GAAP;AACD,KAJgB,EAId,CAJc,CAAnB;AAKA,QAAIF,aAAaH,kBAAjB,EAAqCA,qBAAqBG,UAArB;AACrC,QAAIF,KAAKM,MAAL,GAAcR,WAAlB,EAA+BA,cAAcE,KAAKM,MAAnB;AAC/B,WAAO,CAACR,WAAD,EAAcC,kBAAd,CAAP;AACD,GAXuB,EAWrB,EAXqB,CAAxB;;AAaA,QAAMQ,MAAM,CAACC,MAAD,EAASF,MAAT,KAAoB;AAC9B,UAAMG,IAAIH,SAASE,OAAOF,MAA1B;AACA,UAAMI,IAAIC,MAAMC,IAAN,CAAW;AAAEN,cAAQG;AAAV,KAAX,CAAV;AACA,UAAMI,KAAKH,EAAEI,GAAF,CAAMC,KAAK,GAAX,EAAgBC,IAAhB,CAAqB,EAArB,CAAX,CAH8B,CAGM;;AACpC,UAAMC,IAAK,GAAET,MAAO,GAAEK,EAAG,EAAzB;AACA,WAAOI,CAAP;AACD,GAND;;AAQA,QAAMC,MAAM3B,SAASM,MAAT,CAAgB,CAACO,GAAD,EAAMH,OAAN,EAAekB,CAAf,KAAqB;AAC/C,UAAMC,QAAQ1B,aAAayB,CAAb,CAAd;AACA,UAAME,OAAOD,MAAMjB,KAAN,CAAY,IAAZ,CAAb;AACA,UAAME,IAAIE,IAAIN,OAAJ,EAAaL,aAAb,CAAV;AACA,UAAM,CAAC0B,QAAD,EAAW,GAAGC,SAAd,IAA2BF,IAAjC;AACA,UAAMG,YAAa,GAAEnB,CAAE,KAAIiB,QAAS,EAApC;AACA,UAAMG,WAAWlB,IAAI,EAAJ,EAAQX,aAAR,CAAjB;AACA,UAAM8B,aAAaH,UAAUT,GAAV,CAAca,OAAO;AACtC,YAAMC,IAAK,GAAEH,QAAS,KAAIE,GAAI,EAA9B;AACA,aAAOC,CAAP;AACD,KAHkB,CAAnB;AAIA,UAAMC,MAAM,CAAC,GAAGzB,GAAJ,EAASoB,SAAT,EAAoB,GAAGE,UAAvB,CAAZ;AACA,WAAOG,GAAP;AACD,GAbW,EAaT,EAbS,CAAZ;AAeA,QAAMC,MAAMZ,IAAIJ,GAAJ,CAAQiB,KAAM,KAAIA,CAAE,EAApB,CAAZ;AACA,QAAMC,QAAS;;;;;;;;EAQf5C,EAAG;;;EAGH0C,IAAId,IAAJ,CAAS,IAAT,CAAe;;;;;CAXf;AAkBA,SAAOgB,KAAP;AACD,C","sourcesContent":["const u1 = `\n+ package:\\ta Node.js package to publish on npm (default)\n+ idio:\\t\\ta Koa2+React universal website\n+ structure:\\tan mnp template`.trim()\n\nconst u = {\n  'package-name': 'Name of the new package.',\n  '-s structure': 'Which tructure to use (package, idio, structure).',\n  '-h, --help': 'Print this information and quit.',\n}\nconst commands = Object.keys(u)\nconst descriptions = Object.values(u)\n\nexport default () => {\n  const [commandLength] = commands.reduce(([longestName = 0, longestDescription = 0], name) => {\n    /** @type {string} */\n    const command = u[name]\n    const theLongest = command.split('\\n')\n      .reduce((acc, c) => {\n        if (c.length > acc) return c.length\n        return acc\n      }, 0)\n    if (theLongest > longestDescription) longestDescription = theLongest\n    if (name.length > longestName) longestName = name.length\n    return [longestName, longestDescription]\n  }, [])\n\n  const pad = (string, length) => {\n    const l = length - string.length\n    const t = Array.from({ length: l })\n    const ts = t.map(_ => ' ').join('') // eslint-disable-line no-unused-vars\n    const s = `${string}${ts}`\n    return s\n  }\n\n  const usa = commands.reduce((acc, command, i) => {\n    const value = descriptions[i]\n    const vals = value.split('\\n')\n    const c = pad(command, commandLength)\n    const [firstVal, ...otherVals] = vals\n    const firstLine = `${c}\\t${firstVal}`\n    const emptyPad = pad('', commandLength)\n    const otherLines = otherVals.map(val => {\n      const r = `${emptyPad}\\t${val}`\n      return r\n    })\n    const res = [...acc, firstLine, ...otherLines]\n    return res\n  }, [])\n\n  const USA = usa.map(a => `\\t${a}`)\n  const usage = `MNP: create My New Package.\nIf no arguments are given, the program will ask for the package name in the CLI.\nA github repository for each new package will be created automatically,\ntherefore a GitHub token can be generated at: https://github.com/settings/tokens\nfor the use in this application. The token is saved in ~/.mnprc along with other\nconfiguration, including organisation name etc. Different types of packages,\nwith a Node.js library shell by default are available, including:\n\n${u1}\n\n  mnp [package-name] [-s (idio|structure)]\\n\n${USA.join('\\n')}\n\nExample:\n\n  mnp my-new-package -s idio\n`\n\n  return usage\n}\n"],"file":"usage.js"}