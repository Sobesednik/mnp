{"version":3,"sources":["../../src/bin/index.js"],"names":["ANSWER_TIMEOUT","argv","process","argvPackage","argvPackageName","help","some","a","test","u","console","log","exit","structure","org","token","name","email","website","legalName","questions","packageName","text","validation","Error","packagePath","description","postProcess","s","trim","defaultValue","ssh_url","sshUrl","git_url","gitUrl","html_url","htmlUrl","readmeUrl","issuesUrl","Promise","all","authorName","authorEmail","year","Date","getFullYear","controlled","message","stack","error"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport { resolve } from 'path'\nimport { assertDoesNotExist } from 'wrote'\nimport africa from 'africa'\nimport { askQuestions } from 'reloquent'\nimport cloneSource from '../lib/clone-source'\nimport git from '../lib/git'\nimport { assertNotInGitPath } from '../lib/git-lib'\nimport { createRepository } from '../lib/github'\nimport { findStructure } from '../lib'\nimport questions from './questions'\nimport getUsage from './usage'\n\nconst ANSWER_TIMEOUT = null\n\nconst { argv } = process\nconst [, , argvPackage] = argv\nconst argvPackageName = argvPackage == '-s' ? null : argvPackage\n\nconst help = argv.some(a => /(-h|--help)/.test(a))\nif (help) {\n  const u = getUsage()\n  console.log(u)\n  process.exit()\n}\n\n(async () => {\n  try {\n    const structure = findStructure(argv)\n    const {\n      org, token, name, email, website, legalName,\n    } = await africa('mnp', questions)\n\n    const packageName = argvPackageName ? argvPackageName : await askQuestions({\n      packageName: {\n        text: 'Package name: ',\n        validation(a) {\n          if (!a) throw new Error('You must specify package name')\n        },\n      },\n    }, ANSWER_TIMEOUT, 'packageName')\n\n    const packagePath = resolve(packageName)\n    await assertDoesNotExist(packagePath)\n\n    await assertNotInGitPath()\n\n    console.log(`# ${packageName}`)\n\n    const description = await askQuestions({\n      description: {\n        text: 'Description: ',\n        postProcess: s => s.trim(),\n        defaultValue: '',\n      },\n    }, ANSWER_TIMEOUT, 'description')\n\n    const {\n      ssh_url: sshUrl,\n      git_url: gitUrl,\n      html_url: htmlUrl,\n    } = await createRepository(token, packageName, org, description)\n\n    if (!sshUrl) throw new Error('GitHub repository was not created via API.')\n\n    const readmeUrl = `${htmlUrl}#readme`\n    const issuesUrl = `${htmlUrl}/issues`\n\n    await git(['clone', sshUrl, packagePath])\n\n    console.log('Setting user %s<%s>...', name, email)\n    await Promise.all([\n      git(['config', 'user.name', name], packagePath),\n      git(['config', 'user.email', email], packagePath),\n    ])\n\n    await cloneSource(structure, packagePath, {\n      org,\n      packageName,\n      website,\n      authorName: name,\n      authorEmail: email,\n      year: `${new Date().getFullYear()}`,\n      issuesUrl,\n      readmeUrl,\n      gitUrl,\n      description,\n      legalName,\n    })\n    console.log('Cloned the structure to %s', packagePath)\n    console.log('Created new repository: %s', readmeUrl)\n\n    await git('add .', packagePath)\n    await git(['commit', '-m', 'initialise package'], packagePath)\n    await git('push origin master', packagePath)\n  } catch ({ controlled, message, stack }) {\n    if (controlled) {\n      console.error(message)\n    } else {\n      console.error(stack)\n    }\n    process.exit(1)\n  }\n})()\n"],"file":"index.js"}