{"version":3,"sources":["../../src/bin/index.js"],"names":["struct","help","name","check","short","boolean","command","ANSWER_TIMEOUT","u","console","log","process","exit","available","structure","org","token","userName","email","website","legalName","questions","packageName","text","validation","a","Error","path","description","postProcess","s","trim","defaultValue","ssh_url","sshUrl","git_url","gitUrl","html_url","htmlUrl","readmeUrl","issuesUrl","authorName","authorEmail","year","Date","getFullYear","controlled","message","stack","error"],"mappings":"AAAA;;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAM;AAAEA,QAAF;AAAUC,MAAV;AAAgBC,MAAhB;AAAsBC;AAAtB,IAAgC,qBAAO;AAC3CH,UAAQ,GADmC;AAE3CC,QAAM;AAAEG,WAAO,GAAT;AAAcC,aAAS;AAAvB,GAFqC;AAG3CH,QAAM;AAAEI,aAAS;AAAX,GAHqC;AAI3CH,SAAO;AAJoC,CAAP,CAAtC;AAOA,MAAMI,iBAAiB,IAAvB;;AAEA,IAAIN,IAAJ,EAAU;AACR,QAAMO,IAAI,qBAAV;AACAC,UAAQC,GAAR,CAAYF,CAAZ;AACAG,UAAQC,IAAR;AACD;;AAED,CAAC,YAAY;AACX,MAAI;AACF,QAAIT,KAAJ,EAAW;AACTM,cAAQC,GAAR,CAAY,wBAAZ,EAAsCP,KAAtC;AACA,YAAMU,YAAY,MAAM,mBAAKV,KAAL,CAAxB;AACAM,cAAQC,GAAR,CAAY,yBAAZ,EAAuCG,YAAY,aAAEV,KAAF,EAAS,OAAT,CAAZ,GAAgC,aAAEA,KAAF,EAAS,KAAT,CAAvE,EAAwFU,YAAY,WAAZ,GAA0B,OAAlH;AACA;AACD;;AACD,UAAMC,YAAY,uBAAad,MAAb,CAAlB;AACA,UAAM;AACJe,SADI;AACCC,WADD;AACQd,YAAMe,QADd;AACwBC,WADxB;AAC+BC,aAD/B;AACwCC;AADxC,QAEF,MAAM,qBAAO,KAAP,EAAcC,kBAAd,CAFV;AAIA,UAAMC,cAAcpB,SAAQ,MAAM,0BAAU;AAC1CqB,YAAM,cADoC;;AAE1CC,iBAAWC,CAAX,EAAc;AACZ,YAAI,CAACA,CAAL,EAAQ,MAAM,IAAIC,KAAJ,CAAU,gCAAV,CAAN;AACT;;AAJyC,KAAV,EAK/BnB,cAL+B,CAAd,CAApB;AAOA,UAAMoB,OAAO,mBAAQL,WAAR,CAAb;AACA,UAAM,+BAAmBK,IAAnB,CAAN;AAEA,UAAM,iCAAN;AAEAlB,YAAQC,GAAR,CAAa,KAAIY,WAAY,EAA7B;AAEA,UAAMM,cAAc,MAAM,0BAAU;AAClCL,YAAM,aAD4B;AAElCM,mBAAaC,KAAKA,EAAEC,IAAF,EAFgB;AAGlCC,oBAAc;AAHoB,KAAV,EAIvBzB,cAJuB,CAA1B;AAMA,UAAM;AACJ0B,eAASC,MADL;AAEJC,eAASC,MAFL;AAGJC,gBAAUC;AAHN,QAIF,MAAM,8BAAiBtB,KAAjB,EAAwBM,WAAxB,EAAqCP,GAArC,EAA0Ca,WAA1C,CAJV;AAMA,QAAI,CAACM,MAAL,EAAa,MAAM,IAAIR,KAAJ,CAAU,4CAAV,CAAN;AAEb,UAAM,4BAAeV,KAAf,EAAsBM,WAAtB,EAAmCP,GAAnC,CAAN;AAEA,UAAMwB,YAAa,GAAED,OAAQ,SAA7B;AACA,UAAME,YAAa,GAAEF,OAAQ,SAA7B;AAEA,UAAM,kBAAI,CAAC,OAAD,EAAUJ,MAAV,EAAkBP,IAAlB,CAAJ,CAAN;AAEAlB,YAAQC,GAAR,CAAY,wBAAZ,EAAsCO,QAAtC,EAAgDC,KAAhD;AACA,UAAM,kBAAI,CAAC,QAAD,EAAW,WAAX,EAAwBD,QAAxB,CAAJ,EAAuCU,IAAvC,CAAN;AACA,UAAM,kBAAI,CAAC,QAAD,EAAW,YAAX,EAAyBT,KAAzB,CAAJ,EAAqCS,IAArC,CAAN;AAEA,UAAM,0BAAYb,SAAZ,EAAuBa,IAAvB,EAA6B;AACjCZ,SADiC;AAEjCO,iBAFiC;AAGjCH,aAHiC;AAIjCsB,kBAAYxB,QAJqB;AAKjCyB,mBAAaxB,KALoB;AAMjCyB,YAAO,GAAE,IAAIC,IAAJ,GAAWC,WAAX,EAAyB,EAND;AAOjCL,eAPiC;AAQjCD,eARiC;AASjCH,YATiC;AAUjCR,iBAViC;AAWjCR;AAXiC,KAA7B,CAAN;AAaAX,YAAQC,GAAR,CAAY,4BAAZ,EAA0CiB,IAA1C;AACAlB,YAAQC,GAAR,CAAY,4BAAZ,EAA0C6B,SAA1C;AAEA,UAAM,kBAAI,OAAJ,EAAaZ,IAAb,CAAN;AACA,UAAM,kBAAI,CAAC,QAAD,EAAW,IAAX,EAAiB,oBAAjB,CAAJ,EAA4CA,IAA5C,CAAN;AACA,UAAM,kBAAI,oBAAJ,EAA0BA,IAA1B,CAAN;AACD,GAtED,CAsEE,OAAO;AAAEmB,cAAF;AAAcC,WAAd;AAAuBC;AAAvB,GAAP,EAAuC;AACvC,QAAIF,UAAJ,EAAgB;AACdrC,cAAQwC,KAAR,CAAcF,OAAd;AACD,KAFD,MAEO;AACLtC,cAAQwC,KAAR,CAAcD,KAAd;AACD;;AACDrC,YAAQC,IAAR,CAAa,CAAb;AACD;AACF,CA/ED","sourcesContent":["#!/usr/bin/env node\nimport { resolve } from 'path'\nimport { assertDoesNotExist } from 'wrote'\nimport africa from 'africa'\nimport { askSingle } from 'reloquent'\nimport argufy from 'argufy'\nimport { c } from 'erte'\nimport getUsage from './usage'\nimport questions from './questions'\nimport cloneSource from '../lib/clone-source'\nimport git from '../lib/git'\nimport { assertNotInGitPath } from '../lib/git-lib'\nimport { createRepository, starRepository } from '../lib/github'\nimport { getStructure } from '../lib'\nimport info from '../lib/info'\n\nconst { struct, help, name, check } = argufy({\n  struct: 's',\n  help: { short: 'h', boolean: true },\n  name: { command: true },\n  check: 'c',\n})\n\nconst ANSWER_TIMEOUT = null\n\nif (help) {\n  const u = getUsage()\n  console.log(u)\n  process.exit()\n}\n\n(async () => {\n  try {\n    if (check) {\n      console.log('Checking package %s...', check)\n      const available = await info(check)\n      console.log('Package named %s is %s.', available ? c(check, 'green') : c(check, 'red'), available ? 'available' : 'taken')\n      return\n    }\n    const structure = getStructure(struct)\n    const {\n      org, token, name: userName, email, website, legalName,\n    } = await africa('mnp', questions)\n\n    const packageName = name || await askSingle({\n      text: 'Package name',\n      validation(a) {\n        if (!a) throw new Error('You must specify package name.')\n      },\n    }, ANSWER_TIMEOUT)\n\n    const path = resolve(packageName)\n    await assertDoesNotExist(path)\n\n    await assertNotInGitPath()\n\n    console.log(`# ${packageName}`)\n\n    const description = await askSingle({\n      text: 'Description',\n      postProcess: s => s.trim(),\n      defaultValue: '',\n    }, ANSWER_TIMEOUT)\n\n    const {\n      ssh_url: sshUrl,\n      git_url: gitUrl,\n      html_url: htmlUrl,\n    } = await createRepository(token, packageName, org, description)\n\n    if (!sshUrl) throw new Error('GitHub repository was not created via API.')\n\n    await starRepository(token, packageName, org)\n\n    const readmeUrl = `${htmlUrl}#readme`\n    const issuesUrl = `${htmlUrl}/issues`\n\n    await git(['clone', sshUrl, path])\n\n    console.log('Setting user %s<%s>...', userName, email)\n    await git(['config', 'user.name', userName], path)\n    await git(['config', 'user.email', email], path)\n\n    await cloneSource(structure, path, {\n      org,\n      packageName,\n      website,\n      authorName: userName,\n      authorEmail: email,\n      year: `${new Date().getFullYear()}`,\n      issuesUrl,\n      readmeUrl,\n      gitUrl,\n      description,\n      legalName,\n    })\n    console.log('Cloned the structure to %s', path)\n    console.log('Created new repository: %s', readmeUrl)\n\n    await git('add .', path)\n    await git(['commit', '-m', 'initialise package'], path)\n    await git('push origin master', path)\n  } catch ({ controlled, message, stack }) {\n    if (controlled) {\n      console.error(message)\n    } else {\n      console.error(stack)\n    }\n    process.exit(1)\n  }\n})()\n"],"file":"index.js"}