{"version":3,"sources":["../../src/bin/index.js"],"names":["struct","help","name","_name","check","delete","del","init","local","_local","short","boolean","command","ANSWER_TIMEOUT","makeGitLinks","org","ssh_url","git_url","html_url","u","console","log","process","exit","token","packageName","text","validation","a","Error","available","structure","userName","email","website","legalName","path","description","postProcess","s","trim","defaultValue","sshUrl","gitUrl","htmlUrl","readmeUrl","issuesUrl","authorName","authorEmail","year","Date","getFullYear","controlled","message","stack","error"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport { resolve } from 'path'\nimport { assertDoesNotExist } from 'wrote'\nimport { askSingle } from 'reloquent'\nimport argufy from 'argufy'\nimport { c, b } from 'erte'\nimport getUsage from './usage'\nimport cloneSource from '../lib/clone-source'\nimport git from '../lib/git'\nimport { assertNotInGitPath } from '../lib/git-lib'\nimport { createRepository, starRepository, deleteRepository } from '../lib/github'\nimport { getStructure } from '../lib'\nimport info from '../lib/info'\nimport signIn from '../lib/sign-in'\n\nconst { struct, help, name: _name, check, delete: del, init, local: _local } = argufy({\n  struct: 's',\n  help: { short: 'h', boolean: true },\n  name: { command: true },\n  check: { short: 'c', boolean: true },\n  delete: 'd',\n  init: { short: 'I', boolean: true },\n  local: { short: 'l', boolean: true },\n})\n\nconst ANSWER_TIMEOUT = null\n\nconst makeGitLinks = (org, name) => ({\n  ssh_url: `git://github.com/${org}/${name}.git`,\n  git_url: 123,\n  html_url: `https://github.com/${org}/${name}#readme`,\n})\n\nif (help) {\n  const u = getUsage()\n  console.log(u)\n  process.exit()\n}\n\n(async () => {\n  try {\n    if (init) {\n      await signIn(_local, true)\n      return\n    }\n    debugger\n    if (del) {\n      await deleteRepository(token, del, org)\n      console.log('Deleted %s/%s.', org, del)\n      return\n    }\n\n    const packageName = _name || await askSingle({\n      text: 'Package name',\n      validation(a) {\n        if (!a) throw new Error('You must specify package name.')\n      },\n    }, ANSWER_TIMEOUT)\n\n    if (check) {\n      console.log('Checking package %s...', packageName)\n      const available = await info(packageName)\n      console.log('Package named %s is %s.', available ? c(packageName, 'green') : c(packageName, 'red'), available ? 'available' : 'taken')\n      return\n    }\n\n    const structure = getStructure(struct)\n    const {\n      org, token, name: userName, email, website, legalName,\n    } = await signIn(_local)\n\n    const path = resolve(packageName)\n    await assertDoesNotExist(path)\n\n    await assertNotInGitPath()\n\n    console.log(`# ${packageName}`)\n\n    const description = await askSingle({\n      text: 'Description',\n      postProcess: s => s.trim(),\n      defaultValue: '',\n    }, ANSWER_TIMEOUT)\n\n    const {\n      ssh_url: sshUrl,\n      git_url: gitUrl,\n      html_url: htmlUrl,\n    } = await createRepository(token, packageName, org, description)\n\n    if (!sshUrl) throw new Error('GitHub repository was not created via API.')\n\n    await starRepository(token, packageName, org)\n    console.log('%s\\n%s', c('Created and starred a new repository', 'grey'), b(htmlUrl, 'green'))\n\n    const readmeUrl = `${htmlUrl}#readme`\n    const issuesUrl = `${htmlUrl}/issues`\n\n    await git(['clone', sshUrl, path])\n\n    console.log('Setting user %s<%s>...', userName, email)\n    await git(['config', 'user.name', userName], path)\n    await git(['config', 'user.email', email], path)\n\n    await cloneSource(structure, path, {\n      org,\n      packageName,\n      website,\n      authorName: userName,\n      authorEmail: email,\n      year: `${new Date().getFullYear()}`,\n      issuesUrl,\n      readmeUrl,\n      gitUrl,\n      description,\n      legalName,\n    })\n\n    await git('add .', path, true)\n    await git(['commit', '-m', 'initialise package'], path, true)\n    console.log('Initialised package structure, pushing.')\n    await git('push origin master', path, true)\n\n    console.log('Created a new package: %s.', c(packageName, 'green'))\n  } catch ({ controlled, message, stack }) {\n    if (controlled) {\n      console.error(message)\n    } else {\n      console.error(stack)\n    }\n    process.exit(1)\n  }\n})()\n"],"file":"index.js"}