{"version":3,"sources":["../../src/bin/index.js"],"names":["struct","help","name","_name","check","delete","_delete","init","desc","_description","short","boolean","command","ANSWER_TIMEOUT","makeGitLinks","org","ssh_url","git_url","html_url","u","console","log","process","exit","getPackageNameWithScope","packageName","scope","text","validation","a","Error","available","structure","scripts","structurePath","onCreate","token","userName","email","website","legalName","trademark","y","path","description","postProcess","s","trim","defaultValue","sshUrl","gitUrl","htmlUrl","readmeUrl","issuesUrl","authorName","authorEmail","controlled","message","stack","error"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\nimport { resolve } from 'path'\nimport { assertDoesNotExist } from 'wrote'\nimport { askSingle } from 'reloquent'\nimport argufy from 'argufy'\nimport { c, b } from 'erte'\nimport getUsage from './usage'\nimport cloneSource from '../lib/clone-source'\nimport git from '../lib/git'\nimport { assertNotInGitPath } from '../lib/git-lib'\nimport { createRepository, starRepository, deleteRepository } from '../lib/github'\nimport { getStructure, create } from '../lib'\nimport info from '../lib/info'\nimport signIn from '../lib/sign-in'\n\nconst { struct, help, name: _name, check, delete: _delete, init, desc: _description } = argufy({\n  struct: 's',\n  help: { short: 'h', boolean: true },\n  desc: { short: 'd' },\n  name: { command: true },\n  check: { short: 'c', boolean: true },\n  delete: { short: 'd', boolean: true },\n  init: { short: 'I', boolean: true },\n})\n\nconst ANSWER_TIMEOUT = null\n\nconst makeGitLinks = (org, name) => ({\n  ssh_url: `git://github.com/${org}/${name}.git`,\n  git_url: 123,\n  html_url: `https://github.com/${org}/${name}#readme`,\n})\n\nif (help) {\n  const u = getUsage()\n  console.log(u)\n  process.exit()\n}\n\nconst getPackageNameWithScope = (packageName, scope) => {\n  return `${scope ? `@${scope}/` : ''}${packageName}`\n}\n\n(async () => {\n  try {\n    if (init) {\n      await signIn(true)\n      return\n    }\n\n    const name = _name || await askSingle({\n      text: 'Package name',\n      validation(a) {\n        if (!a) throw new Error('You must specify the package name.')\n      },\n    }, ANSWER_TIMEOUT)\n\n    if (check) {\n      console.log('Checking package %s...', name)\n      const available = await info(name)\n      console.log('Package named %s is %s.', available ? c(name, 'green') : c(name, 'red'), available ? 'available' : 'taken')\n      return\n    }\n\n    const { structure, scripts, structurePath } = getStructure(struct)\n    const { onCreate } = scripts\n\n    const {\n      org, token, name: userName, email, website, legalName, trademark, scope,\n    } = await signIn()\n\n    const packageName = getPackageNameWithScope(name, scope)\n\n    if (_delete) {\n      const y = await askSingle(`Are you sure you want to delete ${packageName}?`)\n      if (y != 'y') return\n      await deleteRepository(token, name, org)\n      console.log('Deleted %s/%s.', org, name)\n      return\n    }\n\n    const path = resolve(name)\n    await assertDoesNotExist(path)\n\n    await assertNotInGitPath()\n\n    console.log(`# ${packageName}`)\n\n    const description = _description || await askSingle({\n      text: 'Description',\n      postProcess: s => s.trim(),\n      defaultValue: '',\n    }, ANSWER_TIMEOUT)\n\n    const {\n      ssh_url: sshUrl,\n      git_url: gitUrl,\n      html_url: htmlUrl,\n    } = await createRepository(token, name, org, description)\n\n    if (!sshUrl) throw new Error('GitHub repository was not created via API.')\n\n    await starRepository(token, name, org)\n    console.log('%s\\n%s', c('Created and starred a new repository', 'grey'), b(htmlUrl, 'green'))\n\n    const readmeUrl = `${htmlUrl}#readme`\n    const issuesUrl = `${htmlUrl}/issues`\n\n    await git(['clone', sshUrl, path])\n\n    console.log('Setting user %s<%s>...', userName, email)\n    await git(['config', 'user.name', userName], path)\n    await git(['config', 'user.email', email], path)\n\n    await cloneSource(structure, path, {\n      org,\n      name,\n      scope,\n      packageName,\n      website,\n      authorName: userName,\n      authorEmail: email,\n      issuesUrl,\n      readmeUrl,\n      gitUrl,\n      description,\n      legalName,\n      trademark,\n    })\n\n    await git('add .', path, true)\n    await git(['commit', '-m', 'initialise package'], path, true)\n    console.log('Initialised package structure, pushing.')\n    await git('push origin master', path, true)\n\n    if (onCreate) {\n      await create(path, structurePath, onCreate)\n    }\n\n    console.log('Created a new package: %s.', c(packageName, 'green'))\n  } catch ({ controlled, message, stack }) {\n    if (controlled) {\n      console.error(message)\n    } else {\n      console.error(stack)\n    }\n    process.exit(1)\n  }\n})()\n"],"file":"index.js"}