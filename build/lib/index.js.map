{"version":3,"sources":["../../src/lib/index.js"],"names":["error","text","err","Error","controlled","getStructure","name","path","require","e","structure","mnp","scripts","structurePath","create","script","Array","isArray","Promise","all","map","s","runOnCreate","oc","cwd","stdio","execArgv"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,QAASC,IAAD,IAAU;AACtB,QAAMC,MAAM,IAAIC,KAAJ,CAAUF,IAAV,CAAZ;AACAC,MAAIE,UAAJ,GAAiB,IAAjB;AACA,QAAMF,GAAN;AACD,CAJD;;AAMO,MAAMG,eAAe,CAACC,OAAO,SAAR,KAAsB;AAChD,MAAIC,IAAJ;;AACA,MAAI;AACFA,WAAOC,QAAS,OAAMF,IAAK,EAApB,CAAP;AACD,GAFD,CAEE,OAAOJ,GAAP,EAAY;AACZ,QAAI;AACFK,aAAOC,QAAS,UAASF,IAAK,EAAvB,CAAP;AACD,KAFD,CAEE,OAAOG,CAAP,EAAU;AACVT,YAAO,gCAA+BM,IAAK,IAA3C;AACD;AACF;;AACD,QAAMI,YAAY,mBAAQH,IAAR,EAAc,WAAd,CAAlB;;AACA,QAAM;AAAEI,SAAKC,UAAU;AAAjB,MAAwBJ,QAAS,GAAED,IAAK,eAAhB,CAA9B;;AACA,SAAO;AACLK,WADK;AAELF,aAFK;AAGLG,mBAAeN;AAHV,GAAP;AAKD,CAlBM;;;;AAoBA,MAAMO,SAAS,OAAOP,IAAP,EAAaM,aAAb,EAA4BE,MAA5B,KAAuC;AAC3D,MAAIC,MAAMC,OAAN,CAAcF,MAAd,CAAJ,EAA2B;AACzB,UAAMG,QAAQC,GAAR,CAAYJ,OAAOK,GAAP,CAAWC,KAAKC,YAAYf,IAAZ,EAAkBM,aAAlB,EAAiCQ,CAAjC,CAAhB,CAAZ,CAAN;AACD,GAFD,MAEO;AACL,UAAMC,YAAYf,IAAZ,EAAkBM,aAAlB,EAAiCE,MAAjC,CAAN;AACD;AACF,CANM;;;;AAQP,MAAMO,cAAc,OAAOf,IAAP,EAAaM,aAAb,EAA4BE,MAA5B,KAAuC;AACzD,QAAMQ,KAAK,mBAAQV,aAAR,EAAuBE,MAAvB,CAAX;;AACA,MAAI,oBAAWQ,EAAX,CAAJ,EAAoB;AAClB,UAAM,wBAAKA,EAAL,EAAS,EAAT,EAAa;AACjBC,WAAKjB,IADY;AAEjBkB,aAAO,SAFU;AAGjBC,gBAAU;AAHO,KAAb,CAAN;AAKD,GAND,MAMO;AACL,UAAM,2BAAMX,MAAN,EAAc,EAAd,EAAkB;AACtBS,WAAKjB,IADiB;AAEtBkB,aAAO;AAFe,KAAlB,CAAN;AAID;AACF,CAdD","sourcesContent":["import { resolve } from 'path'\nimport spawn, { fork } from 'spawncommand'\nimport { existsSync } from 'fs'\n\nconst error = (text) => {\n  const err = new Error(text)\n  err.controlled = true\n  throw err\n}\n\nexport const getStructure = (name = 'package') => {\n  let path\n  try {\n    path = require(`mnp-${name}`)\n  } catch (err) {\n    try {\n      path = require(`@mnpjs/${name}`)\n    } catch (e) {\n      error(`Could not require structure \"${name}\".`)\n    }\n  }\n  const structure = resolve(path, 'structure')\n  const { mnp: scripts = {} } = require(`${path}/package.json`)\n  return {\n    scripts,\n    structure,\n    structurePath: path,\n  }\n}\n\nexport const create = async (path, structurePath, script) => {\n  if (Array.isArray(script)) {\n    await Promise.all(script.map(s => runOnCreate(path, structurePath, s)))\n  } else {\n    await runOnCreate(path, structurePath, script)\n  }\n}\n\nconst runOnCreate = async (path, structurePath, script) => {\n  const oc = resolve(structurePath, script)\n  if (existsSync(oc)) {\n    await fork(oc, [], {\n      cwd: path,\n      stdio: 'inherit',\n      execArgv: [],\n    })\n  } else {\n    await spawn(script, [], {\n      cwd: path,\n      stdio: 'inherit',\n    })\n  }\n}"],"file":"index.js"}