{"version":3,"sources":["../../src/lib/git.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,YAAY;;;;;;;;AAQ/B,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;EAC5C,GAAG,CAAC;EACJ,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;IACvB,CAAC,CAAC,CAAC,CAAC;EACN,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;IAClC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;EACpB;EACA,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;IACX,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM;IAC1B,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM;EAC5B,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3B,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACtB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;IACD,MAAM,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACtB,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC1B,CAAC;EACH;EACA,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC;EAClB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;EAC/C,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM;EACxD,MAAM,CAAC;AACT;;AAEA,MAAM,CAAC,OAAO,CAAC","file":"lib/git.js","sourcesContent":["import spawn from 'spawncommand'\n\n/**\n * Run a git command.\n * @param {string|string[]} args arguments to pass to git executable\n * @param {string} [cwd] working directory\n * @param {boolean} [noPipe=false] whether not to print to stdout and stderr\n */\nasync function git(args, cwd, noPipe = false) {\n  let a\n  if (Array.isArray(args)) {\n    a = args\n  } else if (typeof args == 'string') {\n    a = args.split(' ')\n  }\n  const { promise, stdout, stderr } = spawn('git', a, cwd ? { cwd } : {})\n  if (!noPipe) {\n    stdout.pipe(process.stdout)\n    stderr.pipe(process.stderr)\n  } else if (noPipe == 'dots') {\n    stdout.on('data', () => {\n      process.stdout.write('.')\n    })\n    stderr.on('data', () => {\n      process.stdout.write('.')\n    })\n  }\n  const res = await promise\n  if (noPipe == 'dots') process.stdout.write('\\n')\n  if (/ERROR/.test(res.stderr)) throw new Error(res.stderr)\n  return res\n}\n\nexport default git\n"]}