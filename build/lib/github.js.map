{"version":3,"sources":["../../src/lib/github.js"],"names":["request","data","token","org","method","u","h","Authorization","url","body","headers","returnHeaders","Array","isArray","errors","reduced","reduce","acc","error","errMsg","resource","message","trim","Error","createRepository","name","description","auto_init","gitignore_template","license_template","starRepository","status","console","log"],"mappings":";;;;;;;;;AAAA;;;;AAEe,eAAeA,OAAf,CAAuB;AACpCC,MADoC;AAEpCC,OAFoC;AAGpCC,KAHoC;AAIpCC,QAJoC;AAKpCC;AALoC,CAAvB,EAMZ;AACD,QAAMC,IAAI;AACRC,mBAAgB,SAAQL,KAAM,EADtB;AAER,kBAAc;AAFN,GAAV;AAIA,QAAMM,MAAO,0BAAyBL,MAAO,QAAOA,GAAI,EAAlB,GAAsB,MAAO,IAAGE,CAAE,EAAxE;AACA,QAAM;AAAEI,QAAF;AAAQC;AAAR,MAAoB,MAAM,kBAAIF,GAAJ,EAAS;AACvCE,aAASJ,CAD8B;AAEvCL,QAFuC;AAGvCG,UAHuC;AAIvCO,mBAAe;AAJwB,GAAT,CAAhC;;AAMA,MAAIC,MAAMC,OAAN,CAAcJ,KAAKK,MAAnB,CAAJ,EAA+B;AAC7B,UAAMC,UAAUN,KAAKK,MAAL,CAAYE,MAAZ,CAAmB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACjD,YAAMC,SAAU,GAAED,MAAME,QAAS,KAAIF,MAAMG,OAAQ,EAAnD;AACA,aAAQ,GAAEF,MAAO,KAAIF,GAAI,EAAzB;AACD,KAHe,EAGb,EAHa,EAGTK,IAHS,EAAhB;AAIA,UAAM,IAAIC,KAAJ,CAAUR,OAAV,CAAN;AACD,GAND,MAMO,IAAIN,KAAKY,OAAL,IAAgB,iBAApB,EAAuC;AAC5C,UAAM,IAAIE,KAAJ,CAAUd,KAAKY,OAAf,CAAN;AACD;;AACD,SAAO;AAAEZ,QAAF;AAAQC;AAAR,GAAP;AACD;AAED;;;;;;;;;AAOO,eAAec,gBAAf,CAAgCtB,KAAhC,EAAuCuB,IAAvC,EAA6CtB,GAA7C,EAAkDuB,WAAlD,EAA+D;AACpE,QAAM;AAAEjB;AAAF,MAAW,MAAMT,QAAQ;AAC7BC,UAAM;AACJyB,iBADI;AAEJD,UAFI;AAGJE,iBAAW,IAHP;AAIJC,0BAAoB,MAJhB;AAKJC,wBAAkB;AALd,KADuB;AAQ7B1B,OAR6B;AAS7BD,SAT6B;AAU7BG,OAAG;AAV0B,GAAR,CAAvB;AAYA,SAAOI,IAAP;AACD;;AAEM,eAAeqB,cAAf,CAA8B5B,KAA9B,EAAqCuB,IAArC,EAA2CtB,GAA3C,EAAgD;AACrD,QAAM;AAAEO;AAAF,MAAc,MAAMV,QAAQ;AAChCE,SADgC;AAEhCG,OAAI,WAAUF,GAAI,IAAGsB,IAAK,EAFM;AAGhCrB,YAAQ,KAHwB;AAIhCH,UAAM;AAJ0B,GAAR,CAA1B;;AAMA,MAAIS,QAAQqB,MAAR,IAAkB,gBAAtB,EAAwC;AACtCC,YAAQC,GAAR,CAAY,qCAAZ,EAAmD9B,GAAnD,EAAwDsB,IAAxD;AACD;AACF","sourcesContent":["import rqt from 'rqt'\n\nexport default async function request({\n  data,\n  token,\n  org,\n  method,\n  u,\n}) {\n  const h = {\n    Authorization: `token ${token}`,\n    'User-Agent': 'Mozilla/5.0 mnp Node.js',\n  }\n  const url = `https://api.github.com/${org ? `orgs/${org}` : 'user'}/${u}`\n  const { body, headers } = await rqt(url, {\n    headers: h,\n    data,\n    method,\n    returnHeaders: true,\n  })\n  if (Array.isArray(body.errors)){\n    const reduced = body.errors.reduce((acc, error) => {\n      const errMsg = `${error.resource}: ${error.message}`\n      return `${errMsg}\\n${acc}`\n    }, '').trim()\n    throw new Error(reduced)\n  } else if (body.message == 'Bad credentials') {\n    throw new Error(body.message)\n  }\n  return { body, headers }\n}\n\n/**\n * Create a new github repository.\n * @param {string} token github access token\n * @param {string} name Name of the new package and directory to create\n * @param {string} [org] Organisation\n * @param {string} [description] Description for github\n */\nexport async function createRepository(token, name, org, description) {\n  const { body } = await request({\n    data: {\n      description,\n      name,\n      auto_init: true,\n      gitignore_template: 'Node',\n      license_template: 'mit',\n    },\n    org,\n    token,\n    u: 'repos',\n  })\n  return body\n}\n\nexport async function starRepository(token, name, org) {\n  const { headers } = await request({\n    token,\n    u: `starred/${org}/${name}`,\n    method: 'PUT',\n    data: {},\n  })\n  if (headers.status != '204 No Content') {\n    console.log('Could not star the %s/%s repository', org, name)\n  }\n}\n"],"file":"github.js"}