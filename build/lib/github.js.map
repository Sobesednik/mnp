{"version":3,"sources":["../../src/lib/github.js"],"names":["request","data","token","org","jsonData","JSON","stringify","headers","Authorization","length","url","res","parsed","parse","Array","isArray","errors","reduced","reduce","acc","error","errMsg","resource","message","trim","Error","createRepository","name","description","auto_init","gitignore_template","license_template"],"mappings":";;;;;;;;AAAA;;;;AAEe,eAAeA,OAAf,CAAuB;AACpCC,SAAO,EAD6B;AAEpCC,OAFoC;AAGpCC;AAHoC,CAAvB,EAIZ;AACD,QAAMC,WAAWC,KAAKC,SAAL,CAAeL,IAAf,CAAjB;AACA,QAAMM,UAAU;AACdC,mBAAgB,SAAQN,KAAM,EADhB;AAEd,oBAAgB,kBAFF;AAGd,sBAAkBE,SAASK,MAHb;AAId,kBAAc;AAJA,GAAhB;AAMA,QAAMC,MAAO,0BAAyBP,MAAO,QAAOA,GAAI,EAAlB,GAAsB,MAAO,QAAnE;AACA,QAAMQ,MAAM,MAAM,kBAAID,GAAJ,EAAS;AACzBH,WADyB;AAEzBN,UAAMG;AAFmB,GAAT,CAAlB;AAIA,QAAMQ,SAASP,KAAKQ,KAAL,CAAWF,GAAX,CAAf;;AACA,MAAIG,MAAMC,OAAN,CAAcH,OAAOI,MAArB,CAAJ,EAAiC;AAC/B,UAAMC,UAAUL,OAAOI,MAAP,CAAcE,MAAd,CAAqB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACnD,YAAMC,SAAU,GAAED,MAAME,QAAS,KAAIF,MAAMG,OAAQ,EAAnD;AACA,aAAQ,GAAEF,MAAO,KAAIF,GAAI,EAAzB;AACD,KAHe,EAGb,EAHa,EAGTK,IAHS,EAAhB;AAIA,UAAM,IAAIC,KAAJ,CAAUR,OAAV,CAAN;AACD,GAND,MAMO,IAAIL,OAAOW,OAAP,KAAmB,iBAAvB,EAA0C;AAC/C,UAAM,IAAIE,KAAJ,CAAUb,OAAOW,OAAjB,CAAN;AACD;;AACD,SAAOX,MAAP;AACD;AAED;;;;;;;;;AAOO,eAAec,gBAAf,CAAgCxB,KAAhC,EAAuCyB,IAAvC,EAA6CxB,GAA7C,EAAkDyB,WAAlD,EAA+D;AACpE,QAAMjB,MAAM,MAAMX,QAAQ;AACxBC,UAAM;AACJ2B,iBADI;AAEJD,UAFI;AAGJE,iBAAW,IAHP;AAIJC,0BAAoB,MAJhB;AAKJC,wBAAkB;AALd,KADkB;AAQxB5B,OARwB;AASxBD;AATwB,GAAR,CAAlB;AAWA,SAAOS,GAAP;AACD","sourcesContent":["import rqt from 'rqt'\n\nexport default async function request({\n  data = {},\n  token,\n  org,\n}) {\n  const jsonData = JSON.stringify(data)\n  const headers = {\n    Authorization: `token ${token}`,\n    'Content-Type': 'application/json',\n    'Content-Length': jsonData.length,\n    'User-Agent': 'Mozilla/5.0 mnp Node.js',\n  }\n  const url = `https://api.github.com/${org ? `orgs/${org}` : 'user'}/repos`\n  const res = await rqt(url, {\n    headers,\n    data: jsonData,\n  })\n  const parsed = JSON.parse(res)\n  if (Array.isArray(parsed.errors)){\n    const reduced = parsed.errors.reduce((acc, error) => {\n      const errMsg = `${error.resource}: ${error.message}`\n      return `${errMsg}\\n${acc}`\n    }, '').trim()\n    throw new Error(reduced)\n  } else if (parsed.message === 'Bad credentials') {\n    throw new Error(parsed.message)\n  }\n  return parsed\n}\n\n/**\n * Create a new github repository.\n * @param {string} token github access token\n * @param {string} name Name of the new package and directory to create\n * @param {string} [org] Organisation\n * @param {string} [description] Description for github\n */\nexport async function createRepository(token, name, org, description) {\n  const res = await request({\n    data: {\n      description,\n      name,\n      auto_init: true,\n      gitignore_template: 'Node',\n      license_template: 'mit',\n    },\n    org,\n    token,\n  })\n  return res\n}\n"],"file":"github.js"}