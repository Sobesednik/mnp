{"version":3,"sources":["../../src/lib/github.js"],"names":[],"mappings":"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","file":"lib/github.js","sourcesContent":["import rqt from 'rqt'\n\nexport default async function request({\n  data,\n  token,\n  method,\n  u,\n}) {\n  const h = {\n    Authorization: `token ${token}`,\n    'User-Agent': 'Mozilla/5.0 mnp Node.js',\n  }\n  const url = `https://api.github.com/${u}`\n  const { body, headers } = await rqt(url, {\n    headers: h,\n    data,\n    method,\n    returnHeaders: true,\n  })\n  if (Array.isArray(body.errors)){\n    const reduced = body.errors.reduce((acc, error) => {\n      const errMsg = `${error.resource}: ${error.message}`\n      return `${errMsg}\\n${acc}`\n    }, '').trim()\n    throw new Error(reduced)\n  } else if (body.message == 'Bad credentials') {\n    throw new Error(body.message)\n  }\n  return { body, headers }\n}\n\n/**\n * Create a new github repository.\n * @param {string} token github access token\n * @param {string} name Name of the new package and directory to create\n * @param {string} [org] Organisation\n * @param {string} [description] Description for github\n */\nexport async function createRepository(token, name, org, description) {\n  const u = `${org ? `orgs/${org}` : 'user'}/repos`\n  const { body } = await request({\n    data: {\n      description,\n      name,\n      auto_init: true,\n      gitignore_template: 'Node',\n      license_template: 'mit',\n    },\n    token,\n    u,\n  })\n  return body\n}\n\nexport async function starRepository(token, name, org) {\n  const u = `user/starred/${org}/${name}`\n  const { headers } = await request({\n    token,\n    u,\n    method: 'PUT',\n    data: {},\n  })\n  if (headers.status != '204 No Content') {\n    console.log('Could not star the %s/%s repository', org, name)\n  }\n}\n\nexport async function deleteRepository(token, name, org) {\n  const u = `repos/${org}/${name}`\n  const { headers, body } = await request({\n    token,\n    u,\n    method: 'DELETE',\n    data: {},\n  })\n  if (headers.status != '204 No Content') {\n    throw new Error(`Could not delete ${org}/${name}: ${body.message}.`)\n  }\n}\n"]}