{"version":3,"sources":["../../src/lib/github.js"],"names":["request","data","token","method","u","h","Authorization","url","body","headers","returnHeaders","Array","isArray","errors","reduced","reduce","acc","error","errMsg","resource","message","trim","Error","createRepository","name","org","description","auto_init","gitignore_template","license_template","starRepository","status","console","log","deleteRepository"],"mappings":";;;;;;;;;;AAAA;;;;AAEe,eAAeA,OAAf,CAAuB;AACpCC,MADoC;AAEpCC,OAFoC;AAGpCC,QAHoC;AAIpCC;AAJoC,CAAvB,EAKZ;AACD,QAAMC,IAAI;AACRC,mBAAgB,SAAQJ,KAAM,EADtB;AAER,kBAAc;AAFN,GAAV;AAIA,QAAMK,MAAO,0BAAyBH,CAAE,EAAxC;AACA,QAAM;AAAEI,QAAF;AAAQC;AAAR,MAAoB,MAAM,kBAAIF,GAAJ,EAAS;AACvCE,aAASJ,CAD8B;AAEvCJ,QAFuC;AAGvCE,UAHuC;AAIvCO,mBAAe;AAJwB,GAAT,CAAhC;;AAMA,MAAIC,MAAMC,OAAN,CAAcJ,KAAKK,MAAnB,CAAJ,EAA+B;AAC7B,UAAMC,UAAUN,KAAKK,MAAL,CAAYE,MAAZ,CAAmB,CAACC,GAAD,EAAMC,KAAN,KAAgB;AACjD,YAAMC,SAAU,GAAED,MAAME,QAAS,KAAIF,MAAMG,OAAQ,EAAnD;AACA,aAAQ,GAAEF,MAAO,KAAIF,GAAI,EAAzB;AACD,KAHe,EAGb,EAHa,EAGTK,IAHS,EAAhB;AAIA,UAAM,IAAIC,KAAJ,CAAUR,OAAV,CAAN;AACD,GAND,MAMO,IAAIN,KAAKY,OAAL,IAAgB,iBAApB,EAAuC;AAC5C,UAAM,IAAIE,KAAJ,CAAUd,KAAKY,OAAf,CAAN;AACD;;AACD,SAAO;AAAEZ,QAAF;AAAQC;AAAR,GAAP;AACD;AAED;;;;;;;;;AAOO,eAAec,gBAAf,CAAgCrB,KAAhC,EAAuCsB,IAAvC,EAA6CC,GAA7C,EAAkDC,WAAlD,EAA+D;AACpE,QAAMtB,IAAK,GAAEqB,MAAO,QAAOA,GAAI,EAAlB,GAAsB,MAAO,QAA1C;AACA,QAAM;AAAEjB;AAAF,MAAW,MAAMR,QAAQ;AAC7BC,UAAM;AACJyB,iBADI;AAEJF,UAFI;AAGJG,iBAAW,IAHP;AAIJC,0BAAoB,MAJhB;AAKJC,wBAAkB;AALd,KADuB;AAQ7B3B,SAR6B;AAS7BE;AAT6B,GAAR,CAAvB;AAWA,SAAOI,IAAP;AACD;;AAEM,eAAesB,cAAf,CAA8B5B,KAA9B,EAAqCsB,IAArC,EAA2CC,GAA3C,EAAgD;AACrD,QAAMrB,IAAK,gBAAeqB,GAAI,IAAGD,IAAK,EAAtC;AACA,QAAM;AAAEf;AAAF,MAAc,MAAMT,QAAQ;AAChCE,SADgC;AAEhCE,KAFgC;AAGhCD,YAAQ,KAHwB;AAIhCF,UAAM;AAJ0B,GAAR,CAA1B;;AAMA,MAAIQ,QAAQsB,MAAR,IAAkB,gBAAtB,EAAwC;AACtCC,YAAQC,GAAR,CAAY,qCAAZ,EAAmDR,GAAnD,EAAwDD,IAAxD;AACD;AACF,C,CAGD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGO,eAAeU,gBAAf,CAAgChC,KAAhC,EAAuCsB,IAAvC,EAA6CC,GAA7C,EAAkD;AACvD,QAAMrB,IAAK,SAAQqB,GAAI,IAAGD,IAAK,EAA/B;AACA,QAAM;AAAEf,WAAF;AAAWD;AAAX,MAAoB,MAAMR,QAAQ;AACtCE,SADsC;AAEtCE,KAFsC;AAGtCD,YAAQ,QAH8B;AAItCF,UAAM;AAJgC,GAAR,CAAhC;;AAMA,MAAIQ,QAAQsB,MAAR,IAAkB,gBAAtB,EAAwC;AACtC,UAAM,IAAIT,KAAJ,CAAW,oBAAmBG,GAAI,IAAGD,IAAK,KAAIhB,KAAKY,OAAQ,GAA3D,CAAN;AACD;AACF","sourcesContent":["import rqt from 'rqt'\n\nexport default async function request({\n  data,\n  token,\n  method,\n  u,\n}) {\n  const h = {\n    Authorization: `token ${token}`,\n    'User-Agent': 'Mozilla/5.0 mnp Node.js',\n  }\n  const url = `https://api.github.com/${u}`\n  const { body, headers } = await rqt(url, {\n    headers: h,\n    data,\n    method,\n    returnHeaders: true,\n  })\n  if (Array.isArray(body.errors)){\n    const reduced = body.errors.reduce((acc, error) => {\n      const errMsg = `${error.resource}: ${error.message}`\n      return `${errMsg}\\n${acc}`\n    }, '').trim()\n    throw new Error(reduced)\n  } else if (body.message == 'Bad credentials') {\n    throw new Error(body.message)\n  }\n  return { body, headers }\n}\n\n/**\n * Create a new github repository.\n * @param {string} token github access token\n * @param {string} name Name of the new package and directory to create\n * @param {string} [org] Organisation\n * @param {string} [description] Description for github\n */\nexport async function createRepository(token, name, org, description) {\n  const u = `${org ? `orgs/${org}` : 'user'}/repos`\n  const { body } = await request({\n    data: {\n      description,\n      name,\n      auto_init: true,\n      gitignore_template: 'Node',\n      license_template: 'mit',\n    },\n    token,\n    u,\n  })\n  return body\n}\n\nexport async function starRepository(token, name, org) {\n  const u = `user/starred/${org}/${name}`\n  const { headers } = await request({\n    token,\n    u,\n    method: 'PUT',\n    data: {},\n  })\n  if (headers.status != '204 No Content') {\n    console.log('Could not star the %s/%s repository', org, name)\n  }\n}\n\n\n// export async function getRepository(token, name, org) {\n//   const u = `repos/${name || org}/${name}`\n//   const { headers } = await request({\n//     token,\n//     u,\n//     method: 'PUT',\n//     data: {},\n//   })\n//   if (headers.status != '204 No Content') {\n//     console.log('Could not star the %s/%s repository', org, name)\n//   }\n// }\n\n\nexport async function deleteRepository(token, name, org) {\n  const u = `repos/${org}/${name}`\n  const { headers, body } = await request({\n    token,\n    u,\n    method: 'DELETE',\n    data: {},\n  })\n  if (headers.status != '204 No Content') {\n    throw new Error(`Could not delete ${org}/${name}: ${body.message}.`)\n  }\n}\n"],"file":"github.js"}