{"version":3,"sources":["../../src/lib/clone-source.js"],"names":[],"mappings":"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","file":"lib/clone-source.js","sourcesContent":["import { resolve } from 'path'\nimport bosom from 'bosom'\nimport { clone } from 'wrote'\nimport camelCase from 'camel-case'\n\nconst monthNames = ['January', 'February', 'March', 'April', 'May', 'June',\n  'July', 'August', 'September', 'October', 'November', 'December',\n]\n\nfunction getDefaultCreateDate() {\n  const d = new Date()\n  return `${d.getDate()} ${monthNames[d.getMonth()]} ${d.getFullYear()}`\n}\n\nexport default async function cloneSource(from, to, {\n  org,\n  name,\n  scope,\n  packageName,\n  year = `${new Date().getFullYear()}`,\n  website,\n  issuesUrl = `https://github.com/${org}/${packageName}/issues`,\n  readmeUrl = `https://github.com/${org}/${packageName}#readme`,\n  authorName,\n  authorEmail,\n  gitUrl = `git+https://github.com/${org}/${packageName}.git`,\n  keywords = [name, scope].filter(a => a),\n  description,\n  createDate = getDefaultCreateDate(),\n  legalName,\n  trademark,\n} = {}) {\n  const keywordsReplacement = keywords.map(k => `\"${k}\"`).join(', ').replace(/^\"/, '').replace(/\"$/, '')\n  const regexes = [\n    {\n      re: /myNewPackage/g,\n      replacement: camelCase(name),\n    }, {\n      re: /(my-new-package|{{ package-name }})/g,\n      replacement: packageName,\n    }, {\n      re: /{{ year }}/g,\n      replacement: year,\n    }, {\n      re: /{{ org }}/g,\n      replacement: org,\n    }, {\n      re: /{{ legal_name }}/g,\n      replacement: legalName,\n    }, {\n      re: /{{ trademark }}/g,\n      replacement: trademark,\n    }, {\n      re: /{{ website }}/g,\n      replacement: website,\n    }, {\n      re: /{{ issues_url }}/g,\n      replacement: issuesUrl,\n    }, {\n      re: /{{ readme_url }}/g,\n      replacement: readmeUrl,\n    }, {\n      re: /{{ author_name }}/g,\n      replacement: authorName,\n    }, {\n      re: /{{ author_email }}/g,\n      replacement: authorEmail,\n    }, {\n      re: /{{ keywords }}/g,\n      replacement: keywordsReplacement,\n    }, {\n      re: /{{ git_url }}/g,\n      replacement: gitUrl,\n    }, {\n      re: /{{ description }}/g,\n      replacement: description,\n    }, {\n      re: /{{ create_date }}/g,\n      replacement: createDate,\n    },\n  ]\n  const res = await clone({\n    to,\n    from,\n    regexes,\n  })\n  try {\n    const packageJson = resolve(to, 'package.json')\n    const p = await bosom(packageJson)\n    const pp = {\n      ...p,\n      name: packageName,\n      description,\n      repository: {\n        type: 'git',\n        url: gitUrl,\n      },\n      keywords,\n      author: `${authorName} <${authorEmail}>`,\n      bugs: {\n        url: issuesUrl,\n      },\n      homepage: readmeUrl,\n    }\n    await bosom(packageJson, pp, { space: 2 })\n  } catch (err) {/* no package.json */ }\n  return res\n}\n"]}