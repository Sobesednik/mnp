{"version":3,"sources":["../../src/lib/clone-source.js"],"names":["monthNames","getDefaultCreateDate","d","Date","getDate","getMonth","getFullYear","cloneSource","from","to","org","packageName","year","website","issuesUrl","readmeUrl","authorName","authorEmail","gitUrl","keywords","description","createDate","legalName","trademark","keywordsReplacement","map","k","join","replace","regexes","re","replacement","res","packageJson","p","Object","assign","name","repository","type","url","author","bugs","homepage","space","err"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,aAAa,CAAC,SAAD,EAAY,UAAZ,EAAwB,OAAxB,EAAiC,OAAjC,EAA0C,KAA1C,EAAiD,MAAjD,EACjB,MADiB,EACT,QADS,EACC,WADD,EACc,SADd,EACyB,UADzB,EACqC,UADrC,CAAnB;;AAIA,SAASC,oBAAT,GAAgC;AAC9B,QAAMC,IAAI,IAAIC,IAAJ,EAAV;AACA,SAAQ,GAAED,EAAEE,OAAF,EAAY,IAAGJ,WAAWE,EAAEG,QAAF,EAAX,CAAyB,IAAGH,EAAEI,WAAF,EAAgB,EAArE;AACD;;AAEc,eAAeC,WAAf,CAA2BC,IAA3B,EAAiCC,EAAjC,EAAqC;AAClDC,KADkD;AAElDC,aAFkD;AAGlDC,MAHkD;AAIlDC,SAJkD;AAKlDC,cAAa,sBAAqBJ,GAAI,IAAGC,WAAY,SALH;AAMlDI,cAAa,sBAAqBL,GAAI,IAAGC,WAAY,SANH;AAOlDK,YAPkD;AAQlDC,aARkD;AASlDC,WAAU,0BAAyBR,GAAI,IAAGC,WAAY,MATJ;AAUlDQ,aAAW,CAACR,WAAD,CAVuC;AAWlDS,aAXkD;AAYlDC,eAAapB,sBAZqC;AAalDqB,WAbkD;AAclDC;AAdkD,IAehD,EAfW,EAeP;AACN,QAAMC,sBAAsBL,SAASM,GAAT,CAAaC,KAAM,IAAGA,CAAE,GAAxB,EAA4BC,IAA5B,CAAiC,IAAjC,EAAuCC,OAAvC,CAA+C,IAA/C,EAAqD,EAArD,EAAyDA,OAAzD,CAAiE,IAAjE,EAAuE,EAAvE,CAA5B;AACA,QAAMC,UAAU,CACd;AACEC,QAAI,eADN;AAEEC,iBAAa,wBAAUpB,WAAV;AAFf,GADc,EAIX;AACDmB,QAAI,sCADH;AAEDC,iBAAapB;AAFZ,GAJW,EAOX;AACDmB,QAAI,aADH;AAEDC,iBAAanB;AAFZ,GAPW,EAUX;AACDkB,QAAI,YADH;AAEDC,iBAAarB;AAFZ,GAVW,EAaX;AACDoB,QAAI,mBADH;AAEDC,iBAAaT;AAFZ,GAbW,EAgBX;AACDQ,QAAI,kBADH;AAEDC,iBAAaR;AAFZ,GAhBW,EAmBX;AACDO,QAAI,gBADH;AAEDC,iBAAalB;AAFZ,GAnBW,EAsBX;AACDiB,QAAI,mBADH;AAEDC,iBAAajB;AAFZ,GAtBW,EAyBX;AACDgB,QAAI,mBADH;AAEDC,iBAAahB;AAFZ,GAzBW,EA4BX;AACDe,QAAI,oBADH;AAEDC,iBAAaf;AAFZ,GA5BW,EA+BX;AACDc,QAAI,qBADH;AAEDC,iBAAad;AAFZ,GA/BW,EAkCX;AACDa,QAAI,iBADH;AAEDC,iBAAaP;AAFZ,GAlCW,EAqCX;AACDM,QAAI,gBADH;AAEDC,iBAAab;AAFZ,GArCW,EAwCX;AACDY,QAAI,oBADH;AAEDC,iBAAaX;AAFZ,GAxCW,EA2CX;AACDU,QAAI,oBADH;AAEDC,iBAAaV;AAFZ,GA3CW,CAAhB;AAgDA,QAAMW,MAAM,MAAM,kBAAM;AACtBvB,MADsB;AAEtBD,QAFsB;AAGtBqB;AAHsB,GAAN,CAAlB;;AAKA,MAAI;AACF,UAAMI,cAAc,mBAAQxB,EAAR,EAAY,cAAZ,CAApB;AACA,UAAMyB,IAAI,MAAM,qBAASD,WAAT,CAAhB;AACAE,WAAOC,MAAP,CAAcF,CAAd,EAAiB;AACfG,YAAM1B,WADS;AAEfS,iBAFe;AAGfkB,kBAAY;AACVC,cAAM,KADI;AAEVC,aAAKtB;AAFK,OAHG;AAOfC,cAPe;AAQfsB,cAAS,GAAEzB,UAAW,KAAIC,WAAY,GARvB;AASfyB,YAAM;AACJF,aAAK1B;AADD,OATS;AAYf6B,gBAAU5B;AAZK,KAAjB;AAcA,UAAM,sBAAUkB,WAAV,EAAuBC,CAAvB,EAA0B;AAC9BU,aAAO;AADuB,KAA1B,CAAN;AAGD,GApBD,CAoBE,OAAOC,GAAP,EAAY;AAAC;AAAuB;;AACtC,SAAOb,GAAP;AACD","sourcesContent":["import { resolve } from 'path'\nimport { clone, readJSON, writeJSON } from 'wrote'\nimport camelCase from 'camel-case'\n\nconst monthNames = ['January', 'February', 'March', 'April', 'May', 'June',\n  'July', 'August', 'September', 'October', 'November', 'December',\n]\n\nfunction getDefaultCreateDate() {\n  const d = new Date()\n  return `${d.getDate()} ${monthNames[d.getMonth()]} ${d.getFullYear()}`\n}\n\nexport default async function cloneSource(from, to, {\n  org,\n  packageName,\n  year,\n  website,\n  issuesUrl = `https://github.com/${org}/${packageName}/issues`,\n  readmeUrl = `https://github.com/${org}/${packageName}#readme`,\n  authorName,\n  authorEmail,\n  gitUrl = `git+https://github.com/${org}/${packageName}.git`,\n  keywords = [packageName],\n  description,\n  createDate = getDefaultCreateDate(),\n  legalName,\n  trademark,\n} = {}) {\n  const keywordsReplacement = keywords.map(k => `\"${k}\"`).join(', ').replace(/^\"/, '').replace(/\"$/, '')\n  const regexes = [\n    {\n      re: /myNewPackage/g,\n      replacement: camelCase(packageName),\n    }, {\n      re: /(my-new-package|{{ package-name }})/g,\n      replacement: packageName,\n    }, {\n      re: /{{ year }}/g,\n      replacement: year,\n    }, {\n      re: /{{ org }}/g,\n      replacement: org,\n    }, {\n      re: /{{ legal_name }}/g,\n      replacement: legalName,\n    }, {\n      re: /{{ trademark }}/g,\n      replacement: trademark,\n    }, {\n      re: /{{ website }}/g,\n      replacement: website,\n    }, {\n      re: /{{ issues_url }}/g,\n      replacement: issuesUrl,\n    }, {\n      re: /{{ readme_url }}/g,\n      replacement: readmeUrl,\n    }, {\n      re: /{{ author_name }}/g,\n      replacement: authorName,\n    }, {\n      re: /{{ author_email }}/g,\n      replacement: authorEmail,\n    }, {\n      re: /{{ keywords }}/g,\n      replacement: keywordsReplacement,\n    }, {\n      re: /{{ git_url }}/g,\n      replacement: gitUrl,\n    }, {\n      re: /{{ description }}/g,\n      replacement: description,\n    }, {\n      re: /{{ create_date }}/g,\n      replacement: createDate,\n    },\n  ]\n  const res = await clone({\n    to,\n    from,\n    regexes,\n  })\n  try {\n    const packageJson = resolve(to, 'package.json')\n    const p = await readJSON(packageJson)\n    Object.assign(p, {\n      name: packageName,\n      description,\n      repository: {\n        type: 'git',\n        url: gitUrl,\n      },\n      keywords,\n      author: `${authorName} <${authorEmail}>`,\n      bugs: {\n        url: issuesUrl,\n      },\n      homepage: readmeUrl,\n    })\n    await writeJSON(packageJson, p, {\n      space: 2,\n    })\n  } catch (err) {/* no package.json */ }\n  return res\n}\n"],"file":"clone-source.js"}