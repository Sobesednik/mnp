{"version":3,"sources":["../../src/lib/clone-source.js"],"names":["monthNames","getDefaultCreateDate","d","Date","getDate","getMonth","getFullYear","cloneSource","from","to","org","name","scope","packageName","year","website","issuesUrl","readmeUrl","authorName","authorEmail","gitUrl","keywords","filter","a","description","createDate","legalName","trademark","keywordsReplacement","map","k","join","replace","regexes","re","replacement","res","packageJson","p","pp","repository","type","url","author","bugs","homepage","space","err"],"mappings":"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","sourcesContent":["import { resolve } from 'path'\nimport bosom from 'bosom'\nimport { clone } from 'wrote'\nimport camelCase from 'camel-case'\n\nconst monthNames = ['January', 'February', 'March', 'April', 'May', 'June',\n  'July', 'August', 'September', 'October', 'November', 'December',\n]\n\nfunction getDefaultCreateDate() {\n  const d = new Date()\n  return `${d.getDate()} ${monthNames[d.getMonth()]} ${d.getFullYear()}`\n}\n\nexport default async function cloneSource(from, to, {\n  org,\n  name,\n  scope,\n  packageName,\n  year = `${new Date().getFullYear()}`,\n  website,\n  issuesUrl = `https://github.com/${org}/${packageName}/issues`,\n  readmeUrl = `https://github.com/${org}/${packageName}#readme`,\n  authorName,\n  authorEmail,\n  gitUrl = `git+https://github.com/${org}/${packageName}.git`,\n  keywords = [name, scope].filter(a => a),\n  description,\n  createDate = getDefaultCreateDate(),\n  legalName,\n  trademark,\n} = {}) {\n  const keywordsReplacement = keywords.map(k => `\"${k}\"`).join(', ').replace(/^\"/, '').replace(/\"$/, '')\n  const regexes = [\n    {\n      re: /myNewPackage/g,\n      replacement: camelCase(name),\n    }, {\n      re: /(my-new-package|{{ package-name }})/g,\n      replacement: packageName,\n    }, {\n      re: /{{ year }}/g,\n      replacement: year,\n    }, {\n      re: /{{ org }}/g,\n      replacement: org,\n    }, {\n      re: /{{ legal_name }}/g,\n      replacement: legalName,\n    }, {\n      re: /{{ trademark }}/g,\n      replacement: trademark,\n    }, {\n      re: /{{ website }}/g,\n      replacement: website,\n    }, {\n      re: /{{ issues_url }}/g,\n      replacement: issuesUrl,\n    }, {\n      re: /{{ readme_url }}/g,\n      replacement: readmeUrl,\n    }, {\n      re: /{{ author_name }}/g,\n      replacement: authorName,\n    }, {\n      re: /{{ author_email }}/g,\n      replacement: authorEmail,\n    }, {\n      re: /{{ keywords }}/g,\n      replacement: keywordsReplacement,\n    }, {\n      re: /{{ git_url }}/g,\n      replacement: gitUrl,\n    }, {\n      re: /{{ description }}/g,\n      replacement: description,\n    }, {\n      re: /{{ create_date }}/g,\n      replacement: createDate,\n    },\n  ]\n  const res = await clone({\n    to,\n    from,\n    regexes,\n  })\n  try {\n    const packageJson = resolve(to, 'package.json')\n    const p = await bosom(packageJson)\n    const pp = {\n      ...p,\n      name: packageName,\n      description,\n      repository: {\n        type: 'git',\n        url: gitUrl,\n      },\n      keywords,\n      author: `${authorName} <${authorEmail}>`,\n      bugs: {\n        url: issuesUrl,\n      },\n      homepage: readmeUrl,\n    }\n    await bosom(packageJson, pp, { space: 2 })\n  } catch (err) {/* no package.json */ }\n  return res\n}\n"],"file":"clone-source.js"}