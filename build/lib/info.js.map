{"version":3,"sources":["../../src/lib/info.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK;AAC9B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM;AAC1B,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,GAAG;;AAE1B,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;;AAExB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;EAC7B,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IAC1C,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO;IAC1B,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;MACd,QAAQ,CAAC,CAAC,IAAI,CAAC,QAAQ;MACvB,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI;MACf,IAAI,CAAC,CAAC,IAAI,CAAC,IAAI;MACf,OAAO,CAAC,CAAC;QACP,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;MACjD,CAAC;IACH;IACA,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;MACxB,CAAC,CAAC,GAAG,CAAC,UAAU;IAClB,CAAC;MACC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;QACpB,CAAC,CAAC,GAAG;MACP,CAAC;MACD,CAAC,GAAG,CAAC;EACT,CAAC;EACD,MAAM,CAAC;AACT;AACA,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;EAChC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;EACnC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG;EACjB,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC;EACjE,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AACnB","file":"lib/info.js","sourcesContent":["import { request } from 'https'\nimport promto from 'promto'\nimport { parse } from 'url'\n\nconst REGISTRY = 'https://skimdb.npmjs.com/registry'\n\nconst req = async (address) => {\n  const headers = await new Promise((r, j) => {\n    const opts = parse(address)\n    const options = {\n      hostname: opts.hostname,\n      port: opts.port,\n      path: opts.path,\n      headers: {\n        'User-Agent': 'Mozilla/5.0 (Node.js) mnp/0.7.0',\n      },\n    }\n    request(options, (res) => {\n      r(res.statusCode)\n    })\n      .on('error', (err) => {\n        j(err)\n      })\n      .end()\n  })\n  return headers\n}\nexport default async (program) => {\n  const url = `${REGISTRY}/${program}`\n  const p = req(url)\n  const status = await promto(p, 5000, 'registry request timed out')\n  return status == 404\n}\n"]}