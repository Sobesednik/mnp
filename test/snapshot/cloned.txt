# .alamoderc.json

{
  "env": {
    "test-build": {
      "import": {
        "replacement": {
          "from": "^((../)+)src",
          "to": "$1build"
        }
      }
    }
  }
}

# .eslintignore

build


# .eslintrc

{
  "extends": "artdeco"
}


# .gitignore

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Typescript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env


# .vscode/launch.json

{
  // Use IntelliSense to learn about possible attributes.
  // Hover to view descriptions of existing attributes.
  // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
  "version": "0.2.0",
  "configurations": [
    {
      "type": "node",
      "request": "launch",
      "name": "Launch Zoroaster",
      "program": "${workspaceFolder}/node_modules/.bin/zoroaster",
      "env": {
        "NODE_DEBUG": "@adc/test-package-10",
      },
      "console": "integratedTerminal",
      "args": [
        "test/spec",
        "test/mask",
        "-a",
        "-w",
        "-t",
        "9999999"
      ],
      "skipFiles": [
        "<node_internals>/**/*.js"
      ]
    },
    {
      "type": "node",
      "request": "launch",
      "name": "Launch Example",
      "program": "${workspaceFolder}/example/index.js",
      "env": {
        "NODE_DEBUG": "@adc/test-package-10",
      },
      "console": "integratedTerminal",
      "args": [
        "example/example.js"
      ],
      "skipFiles": [
        "<node_internals>/**/*.js"
      ]
    }
  ]
}


# build/index.js

const { debuglog } = require('util');

const LOG = debuglog('@adc/test-package-10')

/**
 * Description of the test package
 * @param {Config} [config] Options for the program.
 * @param {boolean} [config.shouldRun=true] A boolean option. Default `true`.
 * @param {string} config.text A text to return.
 */
               async function testPackage_10(config = {}) {
  const {
    shouldRun = true,
    text,
  } = config
  if (!shouldRun) return
  LOG('@adc/test-package-10 called with %s', text)
  return text
}

/* documentary types/index.xml */
/**
 * @typedef {Object} Config Options for the program.
 * @prop {boolean} [shouldRun=true] A boolean option. Default `true`.
 * @prop {string} text A text to return.
 */


module.exports = testPackage_10
//# sourceMappingURL=index.js.map

# build/index.js.map

{"version":3,"sources":["../src/index.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI;;AAE9B,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC;;;;;;;;AAQrC,MAAM,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACtD,KAAK,CAAC;IACJ,SAAS,CAAC,CAAC,CAAC,IAAI;IAChB,IAAI;EACN,CAAC,CAAC,CAAC,CAAC;EACJ,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;EAChB,GAAG,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;EACzC,MAAM,CAAC;AACT","file":"index.js","sourcesContent":["import { debuglog } from 'util'\n\nconst LOG = debuglog('@adc/test-package-10')\n\n/**\n * Description of the test package\n * @param {Config} [config] Options for the program.\n * @param {boolean} [config.shouldRun=true] A boolean option. Default `true`.\n * @param {string} config.text A text to return.\n */\nexport default async function testPackage_10(config = {}) {\n  const {\n    shouldRun = true,\n    text,\n  } = config\n  if (!shouldRun) return\n  LOG('@adc/test-package-10 called with %s', text)\n  return text\n}\n\n/* documentary types/index.xml */\n/**\n * @typedef {Object} Config Options for the program.\n * @prop {boolean} [shouldRun=true] A boolean option. Default `true`.\n * @prop {string} text A text to return.\n */\n"]}

# CHANGELOG.md

## 25 May 2018

### 1.0.0

- Create `@adc/test-package-10` with [`mnp`][https://mnpjs.org]
- [repository]: `src`, `test`


# documentary/index.md

# @adc/test-package-10

%NPM: @adc/test-package-10%

`@adc/test-package-10` is Description of the test package

```sh
yarn add -E @adc/test-package-10
```

## Table Of Contents

%TOC%

%~%

# documentary/1-API/index.md

## API

The package is available by importing its default function:

```js
import testPackage_10 from '@adc/test-package-10'
```

%~%

```## testPackage_10
[
  ["arg1", "string"],
  ["arg2?", "boolean"]
]
```

Call this function to get the result you want.

%TYPEDEF types/index.xml%

%EXAMPLE: example/example.js, ../src => @adc/test-package-10%
%FORK example example/example%

%~%

# documentary/footer.md

<!-- ## TODO

- [ ] Add a new item to the todo list. -->

## Copyright

(c) [Art Deco][1] 2018

[1]: https://test.io

%~ -1%

# example/example.js

/* yarn example/ */
import testPackage_10 from '../src'

(async () => {
  const res = await testPackage_10({
    text: 'example',
  })
  console.log(res)
})()

# example/index.js

require('alamode')()
require(`../${process.argv[2]}`)

# LICENSE

MIT License

Copyright (c) 2018 Art Deco Code Limited

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.


# package.json

{
  "name": "@adc/test-package-10",
  "version": "0.0.0",
  "description": "Description of the test package",
  "main": "build",
  "scripts": {
    "t": "zoroaster -a",
    "test": "yarn t test/spec test/mask",
    "spec": "yarn t test/spec",
    "mask": "yarn t test/mask",
    "test-build": "ALAMODE_ENV=test-build yarn test",
    "lint": "eslint .",
    "doc": "NODE_DEBUG=doc doc documentary -o README.md",
    "b": "alamode src -o build",
    "d": "yarn-s d1",
    "d1": "NODE_DEBUG=doc doc src/index.js -g",
    "build": "yarn-s d b doc",
    "rec": "NODE_DEBUG=appshot appshot -T 23 -a Terminal -y 150 -f",
    "e": "node example",
    "example/": "yarn e example/example.js"
  },
  "files": [
    "build"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/test-org/@adc/test-package-10.git"
  },
  "keywords": [
    "test",
    "test2"
  ],
  "author": "test-author <author@test.io>",
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/test-org/@adc/test-package-10/issues"
  },
  "homepage": "https://github.com/test-org/@adc/test-package-10#readme",
  "devDependencies": {
    "alamode": "1.5.1",
    "documentary": "1.20.1",
    "eslint-config-artdeco": "1.0.1",
    "yarn-s": "1.1.0",
    "zoroaster": "3.5.2"
  }
}

# README.md

# @adc/test-package-10

[![npm version](https://badge.fury.io/js/@adc/test-package-10.svg)](https://npmjs.org/package/@adc/test-package-10)

`@adc/test-package-10` is Description of the test package

```sh
yarn add -E @adc/test-package-10
```

## Table Of Contents

- [Table Of Contents](#table-of-contents)
- [API](#api)
- [`testPackage_10(arg1: string, arg2?: boolean)`](#mynewpackagearg1-stringarg2-boolean-void)
  * [`Config`](#type-config)
- [Copyright](#copyright)

<p align="center"><a href="#table-of-contents"><img src=".documentary/section-breaks/0.svg?sanitize=true"></a></p>

## API

The package is available by importing its default function:

```js
import testPackage_10 from '@adc/test-package-10'
```

<p align="center"><a href="#table-of-contents"><img src=".documentary/section-breaks/1.svg?sanitize=true"></a></p>

## `testPackage_10(`<br/>&nbsp;&nbsp;`arg1: string,`<br/>&nbsp;&nbsp;`arg2?: boolean,`<br/>`): void`

Call this function to get the result you want.

__<a name="type-config">`Config`</a>__: Options for the program.

|   Name    |   Type    |    Description    | Default |
| --------- | --------- | ----------------- | ------- |
| shouldRun | _boolean_ | A boolean option. | `true`  |
| __text*__ | _string_  | A text to return. | -       |

```js
/* yarn example/ */
import testPackage_10 from '@adc/test-package-10'

(async () => {
  const res = await testPackage_10({
    text: 'example',
  })
  console.log(res)
})()
```
```
example
```

<p align="center"><a href="#table-of-contents"><img src=".documentary/section-breaks/2.svg?sanitize=true"></a></p>

## Copyright

(c) [Art Deco][1] 2018

[1]: https://test.io

<p align="center"><a href="#table-of-contents"><img src=".documentary/section-breaks/-1.svg?sanitize=true"></a></p>

# src/index.js

import { debuglog } from 'util'

const LOG = debuglog('@adc/test-package-10')

/**
 * Description of the test package
 * @param {Config} [config] Options for the program.
 * @param {boolean} [config.shouldRun=true] A boolean option. Default `true`.
 * @param {string} config.text A text to return.
 */
export default async function testPackage_10(config = {}) {
  const {
    shouldRun = true,
    text,
  } = config
  if (!shouldRun) return
  LOG('@adc/test-package-10 called with %s', text)
  return text
}

/* documentary types/index.xml */
/**
 * @typedef {Object} Config Options for the program.
 * @prop {boolean} [shouldRun=true] A boolean option. Default `true`.
 * @prop {string} text A text to return.
 */


# test/context/index.js

import { resolve } from 'path'
import { debuglog } from 'util'

const LOG = debuglog('@adc/test-package-10')

const FIXTURE = resolve(__dirname, '../fixture')

/**
 * A testing context for the package.
 */
export default class Context {
  async _init() {
    LOG('init context')
  }
  /**
   * Example method.
   */
  example() {
    return 'OK'
  }
  /**
   * Path to the fixture file.
   */
  get FIXTURE() {
    return resolve(FIXTURE, 'test.txt')
  }
  get SNAPSHOT_DIR() {
    return resolve(__dirname, '../snapshot')
  }
  async _destroy() {
    LOG('destroy context')
  }
}

# test/fixture/test.txt

a test file


# test/mask/index.js

import { makeTestSuite } from 'zoroaster'
import Context from '../context'
import testPackage_10 from '../../src'

const ts = makeTestSuite('test/result', {
  async getResults(input) {
    const res = await testPackage_10({
      text: input,
    })
    return res
  },
  context: Context,
})

export default ts

# test/result/index.md

// returns the correct output
test

/* expected */
test
/**/

# test/spec/default.js

import { equal, ok } from 'zoroaster/assert'
import Context from '../context'
import testPackage_10 from '../../src'

/** @type {Object.<string, (c: Context)>} */
const T = {
  context: Context,
  'is a function'() {
    equal(typeof testPackage_10, 'function')
  },
  async 'calls package without error'() {
    await testPackage_10()
  },
  async 'gets a link to the fixture'({ FIXTURE }) {
    const res = await testPackage_10({
      text: FIXTURE,
    })
    ok(res, FIXTURE)
  },
}

export default T

# types/index.xml

<types>
  <type name="Config" desc="Options for the program.">
    <prop boolean name="shouldRun" default="true">
      A boolean option.
    </prop>
    <prop string name="text">
      A text to return.
    </prop>
  </type>
</types>