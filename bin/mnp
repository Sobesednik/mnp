#!/usr/bin/env node
'use strict'

const fs = require('fs')
const makePromise = require('makepromise')
const os = require('os')
const path = require('path')
const readline = require('readline')
const spawnCommand = require('spawncommand')
const wrote = require('wrote')

const lib = require('../src/lib')
const CWD = process.cwd()

const DEFAULT_CONFIG_PATH = path.join(__dirname, 'default-config.json')
const CONFIG_PATH = path.join(os.homedir(), '/.mnp.json')

let githubResult
let packagePath
let packageName
let packageJsonPath

const DEFAULT_STRUCTURE_PATH = path.join(__dirname, '../structures/my-new-package/')

function readLine(question) {
    return new Promise((resolve) => {
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout,
        })

        rl.question(question, (answer) => {
            rl.close()
            resolve(answer)
        })
    })
}

function ask() {
    let token
    let org
    return readLine('GitHub access token: ')
        .then((res) => {
            if (!res) {
                throw new Error('Please specify token')
            }
            token = res
        })
        .then(() => {
            return readLine('Organisation: ')
        })
        .then((res) => {
            org = res || null
        })
        .then(() => ({
            token,
            org,
        }))
}

function assertDoesNotExist(dir) {
    return makePromise(fs.stat, dir)
        .then(() => {
            throw new Error('directory exists')
        }, (err) => {
            if (!/ENOENT/.test(err.message)) {
                throw err
            }
        })
}

let conf
let description
lib.readConfig(CONFIG_PATH, DEFAULT_CONFIG_PATH)
    .then((res) => {
        if (res.token === null) {
            let newConfig
            return ask()
                .then((res) => {
                    newConfig = res
                    return wrote(CONFIG_PATH)
                })
                .then((ws) => {
                    console.log('updating .mnp.json in the home directory...')
                    return makePromise(ws.end.bind(ws), `${JSON.stringify(newConfig, null, 2)}\n`)
                })
                .then(() => {
                    return newConfig
                })
        }
        return res
    })
    .then((res) => {
        conf = res
    })
    .then(() => {
        packageName = process.argv[2]
        if (!packageName) {
            throw new Error('Please give package name')
        }
        packagePath = path.join(CWD, packageName)
        packageJsonPath = path.join(packagePath, 'package.json')
    })
    .then(() =>{
        return assertDoesNotExist(packagePath)
    })
    .then(() => {
        const proc = spawnCommand('git', ['rev-parse', '--git-dir'])
        return proc.promise
    })
    .then((res) => {
        if (/\.git/.test(res.stdout)) {
            throw new Error('Current dir is in git path!')
        }
        return readLine('Description: ')
    })
    .then((answer) => {
        description = typeof answer === 'string' ? answer.trim() : undefined
        return lib.createRepo(conf.token, packageName, conf.org, description)
    })
    .then((res) => {
        githubResult = res
    })
    .then(() => {
        console.log('cloning %s', githubResult.ssh_url)
        const proc = spawnCommand('git', ['clone', githubResult.ssh_url, packagePath])
        return proc.promise
    })
    .then(() => {
        process.chdir(packagePath)
    })
    .then(() => {
        const proc = spawnCommand('rsync', [
            '-av',
            DEFAULT_STRUCTURE_PATH,
            packagePath,
        ])
        return proc.promise
    })
    .then((res) => {
        if (res.stderr) {
            throw new Error(res.stderr)
        }
        if (!/package\.json/.test(res.stdout)) {
            throw new Error('Expected to have copied files')
        }
        console.log(`cloned the structure to ${packagePath}`)
        const packageJson = require(packageJsonPath)
        const newPackage = Object.assign({}, packageJson, {
            name: packageName,
            repository: {
                type: 'git',
                url: githubResult.git_url,
            },
            bugs: {
                url: `${githubResult.html_url}/issues`,
            },
            homepage: `${githubResult.html_url}#readme`,
        }, description ? { description } : {})
        console.log('Created new repo: %s', newPackage.homepage)
        return wrote(packageJsonPath)
            .then((ws) => {
                return makePromise(ws.end.bind(ws), JSON.stringify(newPackage, null, 2))
            })
    })
    .then(() => {
        const proc = spawnCommand('git', ['add', '.'])
        return proc.promise
    })
    .then(() => {
        const proc = spawnCommand('git', ['commit', '-m', 'initialise package'])
        proc.stdout.pipe(process.stdout)
        proc.stderr.pipe(process.stderr)
        return proc.promise
    })
    .then(() => {
        const proc = spawnCommand('git', ['push', 'origin', 'master'])
        proc.stdout.pipe(process.stdout)
        proc.stderr.pipe(process.stderr)
        return proc.promise
    })
    .then(() => {
        console.log('success')
    })
    .catch((err) => {
        console.error(err.message)
    })
