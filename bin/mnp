#!/usr/bin/env node
const { homedir } = require('os')
const { resolve } = require('path')
const spawnCommand = require('spawncommand')
const { createWritable, write } = require('wrote')
const { askQuestions } = require('reloquent')

const cloneSource = require('../src/clone-source')
const lib = require('../src/lib')
const { createRepository } = require('../src/github')

const CWD = process.cwd()

const DEFAULT_CONFIG_PATH = resolve(__dirname, '../etc/default-config.json')
const CONFIG_PATH = resolve(homedir(), '.mnprc')

const DEFAULT_STRUCTURE_PATH = resolve(__dirname, '../structures/my-new-package/')
const ANSWER_TIMEOUT = null

/**
 * Initialise default config
 */
function init() {
    const questions = {
        token: {
            text: 'GitHub access token: ',
            validation: (a) => {
                if (!a) {
                    throw new Error('Please specify token')
                }
            },
        },
        org: {
            text: 'GitHub organisation: ',
            defaultValue: null,
        },
        name: {
            getDefault: async () => {
                const { stdout } = await lib.git(['config', 'user.name'], null, true)
                return stdout.trim()
            },
            text: 'user',
        },
        email: {
            getDefault: async () => {
                const { stdout } = await lib.git(['config', 'user.email'], null, true)
                return stdout.trim()
            },
            text: 'email',
        },
        website: {
            text: 'Website (for readme): ',
            defaultValue: null,
        },
        legalName: {
            text: 'Legal name (for readme & license): ',
            defaultValue: null,
        },
    }
    return askQuestions(questions)
}

async function updateConfig(newConfig, configPath) {
    const ws = await createWritable(configPath)
    console.log(`...updating ${configPath}`)
    await write(ws, JSON.stringify(newConfig, null, 2))
    return newConfig
}

async function initAndUpdate(configPath) {
    const newConfig = await init()
    return updateConfig(newConfig, configPath)
}

async function fullInit(configPath, defaultConfigPath) {
    const config = await lib.readConfig(configPath, defaultConfigPath)
    if (config.token === null) {
        return initAndUpdate(configPath)
    }
    return config
}

const { argv: [,,argvPackageName] } = process;

(async () => {
    try {
        const {
            org, token, name, email, website, legalName,
        } = await fullInit(CONFIG_PATH, DEFAULT_CONFIG_PATH)

        const packageName = argvPackageName ? argvPackageName : await askQuestions({
            packageName: {
                text: 'Please give package name: ',
                validation: (a) => {
                    if (!a) throw new Error('You must specify package name')
                },
            },
        }, ANSWER_TIMEOUT, 'packageName')

        const packagePath = resolve(CWD, packageName)
        await lib.assertDoesNotExist(packagePath)

        const proc = spawnCommand('git', ['rev-parse', '--git-dir'])
        const gitRes = await proc.promise
        if (/\.git/.test(gitRes.stdout)) {
            throw new Error('Current dir is in git path!')
        }

        console.log(`# ${packageName}`)

        const description = await askQuestions({
            description: {
                text: 'Description: ',
                postProcess: s => s.trim(),
                defaultValue: '',
            },
        }, ANSWER_TIMEOUT, 'description')

        const {
            ssh_url: sshUrl,
            git_url: gitUrl,
            html_url: htmlUrl,
        } = await createRepository(token, packageName, org, 123)
        const readmeUrl = `${htmlUrl}#readme`
        const issuesUrl = `${htmlUrl}/issues`

        await lib.git(['clone', sshUrl, packagePath])

        console.log('Setting user %s<%s>...', name, email)
        await Promise.all([
            lib.git(['config', 'user.name', name], packagePath),
            lib.git(['config', 'user.email', email], packagePath),
        ])

        await cloneSource(DEFAULT_STRUCTURE_PATH, packagePath, {
            org: org || legalName,
            packageName,
            website,
            authorName: name,
            authorEmail: email,
            year: `${new Date().getFullYear()}`,
            issuesUrl,
            readmeUrl,
            gitUrl,
            description,
        })
        console.log('Cloned the structure to %s', packagePath)
        console.log('Created new repository: %s', readmeUrl)

        await lib.git(['add', '.'], packagePath)
        await lib.git(['commit', '-m', 'initialise package'], packagePath)
        await lib.git(['push', 'origin', 'master'], packagePath)
    } catch (err) {
        console.error(err)
        process.exit(1)
    }
})()
