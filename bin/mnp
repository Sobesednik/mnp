#!/usr/bin/env node
const { resolve } = require('path')
const { assertDoesNotExist, assertExists } = require('wrote')
const africa = require('africa')
const { askQuestions } = require('reloquent')
const cloneSource = require('../src/clone-source')
const git = require('../src/git')
const { assertNotInGitPath } = require('../src/git-lib')
const { createRepository } = require('../src/github')
const questions = require('./questions')

const ANSWER_TIMEOUT = null

const { argv } = process
const [, , argvPackageName] = argv

const si = argv.indexOf('-s')
const s = (si != -1 && argv[si + 1]) ? argv[si + 1] : 'my-new-package'

const STRUCTURE_PATH = resolve(__dirname, `../structures/${s}/`)

const error = (text) => {
  const err = new Error(text)
  err.controlled = true
  throw err
}

;(async () => {
  try {
    try {
      await assertExists(STRUCTURE_PATH)
    } catch (err) {
      error(`Unknown structure "${s}".`)
    }
    const {
      org, token, name, email, website, legalName,
    } = await africa('mnp', questions)

    const packageName = argvPackageName ? argvPackageName : await askQuestions({
      packageName: {
        text: 'Please give package name: ',
        validation(a) {
          if (!a) throw new Error('You must specify package name')
        },
      },
    }, ANSWER_TIMEOUT, 'packageName')

    const packagePath = resolve(packageName)
    await assertDoesNotExist(packagePath)

    await assertNotInGitPath()

    console.log(`# ${packageName}`)

    const description = await askQuestions({
      description: {
        text: 'Description: ',
        postProcess: s => s.trim(),
        defaultValue: '',
      },
    }, ANSWER_TIMEOUT, 'description')

    const {
      ssh_url: sshUrl,
      git_url: gitUrl,
      html_url: htmlUrl,
    } = await createRepository(token, packageName, org, description)

    if (!sshUrl) throw new Error('GitHub repository was not created via API.')

    const readmeUrl = `${htmlUrl}#readme`
    const issuesUrl = `${htmlUrl}/issues`

    await git(['clone', sshUrl, packagePath])

    console.log('Setting user %s<%s>...', name, email)
    await Promise.all([
      git(['config', 'user.name', name], packagePath),
      git(['config', 'user.email', email], packagePath),
    ])

    await cloneSource(DEFAULT_STRUCTURE_PATH, packagePath, {
      org: org || legalName,
      packageName,
      website,
      authorName: name,
      authorEmail: email,
      year: `${new Date().getFullYear()}`,
      issuesUrl,
      readmeUrl,
      gitUrl,
      description,
    })
    console.log('Cloned the structure to %s', packagePath)
    console.log('Created new repository: %s', readmeUrl)

    await git(['add', '.'], packagePath)
    await git(['commit', '-m', 'initialise package'], packagePath)
    await git(['push', 'origin', 'master'], packagePath)
  } catch (err) {
    if (err.controlled) {
      console.error(err.message)
    } else {
      console.error(err)
    }
    process.exit(1)
  }
})()
