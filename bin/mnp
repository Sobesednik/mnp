#!/usr/bin/env node
const { resolve } = require('path')
const spawnCommand = require('spawncommand')
const { assertDoesNotExist } = require('wrote')
const africa = require('africa')
const { askQuestions } = require('reloquent')
const cloneSource = require('../src/clone-source')
const git = require('../src/git')
const { createRepository } = require('../src/github')

const DEFAULT_STRUCTURE_PATH = resolve(__dirname, '../structures/my-new-package/')
const ANSWER_TIMEOUT = null

const questions = {
    token: {
        text: 'GitHub access token: ',
        validation: (a) => {
            if (!a) {
                throw new Error('Please specify token')
            }
        },
    },
    org: {
        text: 'GitHub organisation: ',
        defaultValue: null,
    },
    name: {
        async getDefault() {
            const { stdout } = await git(['config', 'user.name'], null, true)
            return stdout.trim()
        },
        text: 'user',
    },
    email: {
        async getDefault() {
            const { stdout } = await git(['config', 'user.email'], null, true)
            return stdout.trim()
        },
        text: 'email',
    },
    website: {
        text: 'Website (for readme): ',
        defaultValue: null,
    },
    legalName: {
        text: 'Legal name (for readme & license): ',
        defaultValue: null,
    },
}

const { argv: [,,argvPackageName] } = process;

(async () => {
    try {
        const {
            org, token, name, email, website, legalName,
        } = await africa('mnp', questions)

        const packageName = argvPackageName ? argvPackageName : await askQuestions({
            packageName: {
                text: 'Please give package name: ',
                validation: (a) => {
                    if (!a) throw new Error('You must specify package name')
                },
            },
        }, ANSWER_TIMEOUT, 'packageName')

        const packagePath = resolve(packageName)
        await assertDoesNotExist(packagePath)

        const proc = spawnCommand('git', ['rev-parse', '--git-dir'])
        const gitRes = await proc.promise
        if (/\.git/.test(gitRes.stdout)) {
            throw new Error('Current dir is in git path!')
        }

        console.log(`# ${packageName}`)

        const description = await askQuestions({
            description: {
                text: 'Description: ',
                postProcess: s => s.trim(),
                defaultValue: '',
            },
        }, ANSWER_TIMEOUT, 'description')

        const {
            ssh_url: sshUrl,
            git_url: gitUrl,
            html_url: htmlUrl,
        } = await createRepository(token, packageName, org, description)
        const readmeUrl = `${htmlUrl}#readme`
        const issuesUrl = `${htmlUrl}/issues`

        await git(['clone', sshUrl, packagePath])

        console.log('Setting user %s<%s>...', name, email)
        await Promise.all([
            git(['config', 'user.name', name], packagePath),
            git(['config', 'user.email', email], packagePath),
        ])

        await cloneSource(DEFAULT_STRUCTURE_PATH, packagePath, {
            org: org || legalName,
            packageName,
            website,
            authorName: name,
            authorEmail: email,
            year: `${new Date().getFullYear()}`,
            issuesUrl,
            readmeUrl,
            gitUrl,
            description,
        })
        console.log('Cloned the structure to %s', packagePath)
        console.log('Created new repository: %s', readmeUrl)

        await git(['add', '.'], packagePath)
        await git(['commit', '-m', 'initialise package'], packagePath)
        await git(['push', 'origin', 'master'], packagePath)
    } catch (err) {
        console.error(err)
        process.exit(1)
    }
})()
